@page "/ingredients"
@using FoodInventory.Data
@using FoodInventory.Models
@inject IDialogService DialogService
@inject InventoryRepository InventoryRepository
@rendermode InteractiveServer

<PageTitle>Ingredients</PageTitle>

<MudDataGrid Items="@ingredients" Breakpoint="Breakpoint.None">
    <Columns>
        <PropertyColumn Property="x => x.Name" Title="Name" />
        <PropertyColumn Property="x => x.Weight" Title="Weight (g)" />
        <TemplateColumn Title="Best By" SortBy="x => x.BestBy" Sortable="true">
            <CellTemplate>
                @(@context.Item.BestBy?.ToShortDateString() ?? "None")
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn>
            <CellTemplate>
                <MudButtonGroup>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@((e) => OpenIngredientDialog(@context.Item))"></MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@((e) => DeleteIngredient(@context.Item.Id))"></MudIconButton>
                </MudButtonGroup>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

<MudGrid Justify="Justify.FlexEnd" Style="padding: 10px">
    <MudItem>
        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Label="Add Ingredient" OnClick="@(e => OpenIngredientDialog())" />
    </MudItem>
</MudGrid>



@code {

    private List<Ingredient> ingredients { get; set; } = new List<Ingredient>();

    protected override async Task OnInitializedAsync()
    {
        var loadedIngredients = await InventoryRepository.GetIngredients();
        ingredients = loadedIngredients.ToList();
    }

    private async Task AddIngredient(Ingredient ingredient)
    {
        var insertedIngredient = await InventoryRepository.AddIngredient(ingredient);
        ingredients.Add(insertedIngredient);
    }

    private async Task UpdateIngredient(Ingredient ingredient)
    {
        await InventoryRepository.UpdateIngredient(ingredient);
        ingredients[ingredients.FindIndex(x => x.Id == ingredient.Id)] = ingredient;
    }

    private async Task DeleteIngredient(int id)
    {
        await InventoryRepository.DeleteIngredient(id);
        ingredients.Remove(ingredients.First(x => x.Id == id));
    }

    private async Task OpenIngredientDialog(Ingredient? currentIngredient = null)
    {
        var ingredientInput = currentIngredient ?? new Ingredient
        {
            Name = ""
        };

        var actionText = currentIngredient is null ? "Add" : "Edit";

        var parameters = new DialogParameters<IngredientDialog> { 
            { x => x.Ingredient, ingredientInput },
            { x => x.ActionText, actionText}
        };
        
        var options = new DialogOptions { CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<IngredientDialog>($"{actionText} Ingredient", parameters, options);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled && result.Data is Ingredient ingredient)
        {
            if(ingredient.Id == 0)
            {
                await AddIngredient(ingredient);
            }
            else
            {
                await UpdateIngredient(ingredient);
            }
        }
    }
}
